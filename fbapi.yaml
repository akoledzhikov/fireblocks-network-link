openapi: 3.0.0
info:
  description: |
    This is the [Fireblocks](https://fireblocks.com) Exchange API standard.
    Check out the [API documentation](https://docs.fireblocks.com) for more information.

    <h1>Authentication Fundamentals</h1>

    The API-KEY and SECRET are generated and provided by the exchange.
    
    <h2>Creating a Request</h2>

    All REST requests will contain the following headers:

    <p>*X-FBAPI-KEY* The API key as a string.</p>
    <p>*X-FBAPI-SIGNATURE* The encoded signature (see Signing a Message).</p>
    <p>*X-FBAPI-TIMESTAMP* A timestamp of the request (in milliseconds).</p>

    <h2>Signing a Message</h2>

    <p><i>For the header of X-FBAPI-SIGNATURE:</i></p>

    <p>Create a prehash string {timestamp+method+endpoint+body} and apply an encoding onto the string (Pre-encoding is configurable: NONE, BASE64, HEX).</p>
    <p>[The request body is a JSON string and need to be the same with the parameters passed by the API]</p>
    <p>Use SECRET to encrypt the string with HMAC (Internal hash function is configurable: SHA512, SHA3_256).</p>
    <p>After that, apply an additional encoding onto the result (Post-encoding is configurable: PLAIN, BASE64, HEXSTR, BASE58, BASE32).</p>

    <h2><i>Notice</i></h2>

    <p>The encrypted timestamp is consistent with the X-FBAPI-TIMESTAMP field in the request header.</p>
    <p>The body to be encrypted is consistent with the content of the Request Body.</p>
    <p>The Method is always UPPER CASE.</p>

    <p>For GET requests, the endpoint contains the query string. e.g. /v1/depositAddress?coinSymbol=ETH&...</p>
    <p>The body is "" if there is no request body (for GET requests).</p>

    <h2>Selecting a Timestamp</h2>

    <p>The X-FBAPI-TIMESTAMP header is the number of milliseconds since Unix Epoch in UTC. e.g. 1547015186532</p>

    <p>The difference between the timestamp and the exchange service time must be less than 5 seconds.</p>
    <p>It's expected that the request on the exchange's end will be considered expired and rejected otherwise.</p>
  title: Fireblocks Exchange API
  version: "0.3.8"
  contact:
    email: support@fireblocks.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/fb-api/Exchanges-API/1.0.0
  - url: 'https://api.fireblocks.com/v1'
paths:  
  /accounts:
    get:
      summary: Fetches list of all account types, and the balances within them.
      description: >
              In case the exchange supports an account type but the account doesn't
              contain any balance in that account type, it is expected the "balances"
              field to be an empty array.
      operationId: getBalances
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
        '401':
          description: Unauthorized. Either API details are missing or invalid
        '500':
          description: Exchange internal error, can't process this right now.

  /internalTransfer:
    post:
      summary: Initiate a transfer from one internal account to another, eg. TRADING to MARGIN
      operationId: internalTransfer
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: fromAccountType
          in: query
          description: "The sub-account type being transferred from."
          required: true
          example: "MARGIN"
          schema:
            $ref : '#/components/schemas/EAccountType'
        - name: toAccountType
          in: query
          description: "The sub-account type being transferred to."
          required: true
          example: "SPOT"
          schema:
            $ref : '#/components/schemas/EAccountType'
        - name: coinSymbol
          in: query
          example: "USDT"
          required: true
          schema:
            type: string
        - name: amount
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required: [completed]
                properties:
                  completed:
                    type: boolean
                    example: true
                  transactionID:
                    type: string
                    example: "3e8374383acce78d38be7fe9"
        '400':
          description: Invalid Operation
        '429':
          description: Rate limit reached
        
  /subaccountTransfer:
    post:
      summary: Initiate a transfer between an internal sub-account and the main-account
      operationId: subaccountTransfer
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: subAccountID
          in: query
          required: true
          schema:
            type: string
        - name: direction
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ESubTransferDirectionType'
        - name: coinSymbol
          in: query
          required: true
          example: "USDT"
          schema:
            type: string
        - name: amount
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  completed:
                    type: boolean
                    example: true
                  transactionID:
                    type: string
                    example: "3e8374383acce78d38be7fe9"
        '400':
          description: Invalid operation
        '429':
          description: Rate limit reached

  /withdraw:
    post:
      summary: Initiate a withdrawal from Exchange wallet to external wallet address
      operationId: postWithdraw
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: accountType
          in: query
          required: true
          schema:
            $ref : '#/components/schemas/EAccountType'
        - name: toAddress
          in: query
          required: true
          schema:
            type: string
        - name: tag
          in: query
          required: false
          description: "A 'tag' or 'memo', if required by the network"
          schema:
            type: string
        - name: coinSymbol
          in: query
          required: true
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
        - name: amount
          in: query
          required: true
          schema:
            type: string
        - name: isGross
          in: query
          required: true
          schema:
            type: boolean
        - name: isFiat
          in: query
          required: true
          description: "Is the currency type sent a fiat?"
          schema:
            type: boolean
        - name: maxFee
          in: query
          required: false
          description: The service fee charged for withdrawal 
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionID:
                    type: string
                    example: "3e8374383acce78d38be7fe9"
        '400':
          description: Invalid operation
        '429':
          description: Rate limit reached
    get:
      summary: Fetch the status of a given transaction ID
      operationId: getWithdraw
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: transactionID
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >
            Successful operation.
            If status is NOT_FOUND, all other fields are optional.
            In the other cases, all fields are required.
          content:
            application/json:
              schema:
                type: object
                required: [status]
                properties:
                  transactionID:
                    type: string
                    example: "46bas218d9h21uhib4i1u2h"
                  status:
                    $ref: '#/components/schemas/Status'
                  txHash:
                    type: string
                    example: "44e25bc0ed840f9bf0e58d6227db15192d5b89e79ba4304da16b09703f68ceaf"
                  amount:
                    type: string
                    description: "The net amount of the transaction"
                    example: "1.1"
                  serviceFee:
                    type: string
                    example: "0.000000031"
                  coinSymbol:
                    type: string
                    example: "ETH"
                  network:
                    $ref: '#/components/schemas/ENetworkType'
                  direction:
                    $ref: '#/components/schemas/ETransferDirectionTypeWithdraw'
                  timestamp:
                    type: number
                    format: UNIX-timestamp-epoch
                    description: "Milliseconds"
                    example: 1546658861000
        '400':
          description: Invalid operation

  /withdrawalFee:
    get:
      summary: Fetch the estimated transaction fee required for an external withdrawal
      operationId: fetchWithdrawalFee
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: transferAmount
          in: query
          required: true
          schema:
            type: string
        - name: coinSymbol
          in: query
          required: true
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
        - name: isFiat
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  feeAmount:
                    type: string
                    example: "0.23823"
        '400':
          description: Invalid operation

  /depositAddress:
    get:
      summary: Fetch the deposit wallet address for a coinSymbol and network
      description: > 
        Fireblocks will first check if a deposit wallet address exists using this endpoint.
        If one does not exist, then a new address will be created using the `POST /depositAddress` endpoint.
      operationId: fetchDepositAddress
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: accountType
          in: query
          required: true
          example: "SPOT"
          schema:
            $ref : '#/components/schemas/EAccountType' 
        - name: coinSymbol
          in: query
          required: true
          example: "USDT"
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required: [depositAddress]
                properties:
                  depositAddress:
                    type: string
                    description: "The address of the deposit address. If not found, it will be empty."
                    example: "0xb794f5ea0ba39494ce839613fffba74279579268"
                  depositAddressTag:
                    type: string
                    description: "A destination tag/memo to include for supported coins (eg. XLM, XRP etc')"
                    example: "63163621"
        '400':
          description: Invalid operation
    post:
      summary: Create a new deposit wallet address for a given coinSymbol and network
      operationId: createDepositAddress
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: accountType
          in: query
          required: true
          schema:
            $ref : '#/components/schemas/EAccountType' 
        - name: coinSymbol
          in: query
          example: "USDT"
          required: true
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required: [depositAddress]
                properties:
                  depositAddress:
                    type: string
                    description: "The address of the deposit address. If not found, it will be empty."
                    example: "0xb794f5ea0ba39494ce839613fffba74279579268"
                  depositAddressTag:
                    type: string
                    description: "A destination tag/memo to include for supported coins (eg. XLM, XRP etc')"
                    example: "63163621"
        '400':
          description: Invalid operation

  /deposit:
    get:
      summary: Fetch the status of a given <txHash, network> pair
      operationId: getDeposit
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: txHash
          in: query
          required: true
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
      responses:
        '200':
          description: >
            Successful operation.
            If status is NOT_FOUND, all other fields are optional.
            In the other cases, all fields are required.
          content:
            application/json:
              schema:
                type: object
                required: [status]
                properties:
                  transactionID:
                    type: string
                    example: "46bas218d9h21uhib4i1u2h"
                  status:
                    $ref: '#/components/schemas/Status'
                  txHash:
                    type: string
                    example: "44e25bc0ed840f9bf0e58d6227db15192d5b89e79ba4304da16b09703f68ceaf"
                  amount:
                    type: string
                    description: "The net amount of the transaction"
                    example: "1.1"
                  serviceFee:
                    type: string
                    example: "0.000000031"
                  coinSymbol:
                    type: string
                    example: "ETH"
                  network:
                    $ref: '#/components/schemas/ENetworkType'
                  direction:
                    $ref: '#/components/schemas/ETransferDirectionTypeDeposit'
                  timestamp:
                    type: number
                    format: UNIX-timestamp-epoch
                    description: "Milliseconds"
                    example: 1546658861000
        '400':
          description: Invalid operation

  /transactionHistory:
    get:
      summary: Fetch the history of all transactions
      operationId: transactionHistory
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: UNIX-timestamp-epoch
            description: "Milliseconds"
            example: "1546658861000"
        - name: toDate
          in: query
          required: true
          schema:
            type: string
            format: UNIX-timestamp-epoch
            description: "Milliseconds"
            example: "1546658865000"
        - name: pageSize
          in: query
          description: "Number of entries per page size in response"
          required: true
          schema:
            type: number
        - name: pageCursor
          in: query
          required: false
          description: "If not specified, return the first page. Otherwise, return the page the cursor points to."
          schema:
            type: string
        - name: isSubTransfer
          in: query
          required: true
          example: false
          description: "If this is a sub-account tranfer"
          schema:
            type: boolean
        - name: coinSymbol
          in: query
          required: true
          example: "USDT"
          schema:
            type: string
        - name: network
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ENetworkType'
        - name: isFiat
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: [transactions]
                  properties:
                    nextPageCursor:
                        type: string
                        description: "If not present, refers to the last possible page. Otherwise refers to the next page."
                    transactions:
                      type: array
                      items:
                        type: object
                        properties:
                          transactionID:
                            type: string
                            example: "46bas218d9h21uhib4i1u2h"
                          status:
                            $ref: '#/components/schemas/Status'
                          txHash:
                            type: string
                            example: "44e25bc0ed840f9bf0e58d6227db15192d5b89e79ba4304da16b09703f68ceaf"
                          amount:
                            type: string
                            description: "The net amount of the transaction"
                            example: "1.1"
                          serviceFee:
                            type: string
                            example: "0.000000031"
                          coinSymbol:
                            type: string
                            example: "ETH"
                          network:
                            $ref: '#/components/schemas/ENetworkType'
                          direction:
                            $ref: '#/components/schemas/ETransferDirectionTypeDeposit'
                          timestamp:
                            type: number
                            format: UNIX-timestamp-epoch
                            description: "In Milliseconds. The timestamp on the creation of the transaction."
                            example: 1546658861000
        '400':
          description: Invalid operation

  /supportedAssets:
    get:
      summary: Fetch the assets supported by the exchanges
      operationId: supportedAssets
      parameters:
        - name: X-FBAPI-KEY
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-KEY'
        - name: X-FBAPI-TIMESTAMP
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-TIMESTAMP'
        - name: X-FBAPI-SIGNATURE
          in: header
          required: true
          schema:
            $ref: '#/components/schemas/X-FBAPI-SIGNATURE'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required: [coinSymbol, network, type]
                  properties:
                    coinSymbol:
                      type: string
                      example: "USDT"
                    network:
                      $ref: '#/components/schemas/ENetworkType'
                    type:
                      $ref: '#/components/schemas/EAssetType'
                    identifier:
                      type: string
                      description: "The identifier for asset types that are created by a smart contract (ERC20, BEP20, etc'), could be a contractAddress for example"
                      example: "0xdAC17F958D2ee523a2206206994597C13D831ec7"
        '400':
          description: Invalid operation

components:
  schemas:
    X-FBAPI-KEY:
      type: string
      description: >
        All requests must include the X-FBAPI-KEY header containing your API key.
    X-FBAPI-TIMESTAMP:
      type: number
      format: UNIX-timestamp-epoch
      description: >
        All requests must include the X-FBAPI-TIMESTAMP header containing the timestamp (in milliseconds).
      example:
        1546658861000
    X-FBAPI-SIGNATURE:
      type: string
      description: >
        All requests must include the X-FBAPI-SIGNATURE header containing the signature of the request.
    EAccountType:
      type: string
      description: "Enumeration on types of possible accounts"
      enum:
        - EXCHANGE
        - SPOT
        - FUNDING
        - MARGIN
        - FUTURES
      example:
        MARGIN
    ENetworkType:
      type: string
      description: "Enumeration on types of possible networks"
      enum:
        - XRP
        - XLM
        - XEM
        - BTC
        - ALGO
        - ADA
        - DIEM
        - ETH
        - DOT
        - ETC
        - EOS
        - HBAR
        - BANK
        - TERRA
        - XTZ
        - SOL
      example:
        ETH
    EAssetType:
      type: string
      description: >
        Asset type:

          * `BASE_ASSET` - A blockchain asset
          * `SOL_ASSET` - An asset over Solana
          * `FIAT` - A fiat currency asset
          * `ERC20` - An asset that complies to ERC20
          * `COMPOUND` - A compound asset
          * `XLM_ASSET` - An asset over Stellar
          * `BEP20` - An asset that complies to BEP20
          * `ALGO_ASSET` - An asset over Algorand
          * `TRC20` - An asset that complies to TRC20
      enum:
        - BASE_ASSET
        - SOL_ASSET
        - FIAT
        - ERC20
        - COMPOUND
        - XLM_ASSET
        - BEP20
        - ALGO_ASSET
        - TRC20
      example:
        ERC20
    ESubTransferDirectionType:
      type: string
      description: >
        Direction of a sub transfer:

          * `IN` - From sub account to the main account
          * `OUT` - From the main account to a sub account
      enum:
        - IN
        - OUT
      example:
        IN
    ETransferDirectionTypeDeposit:
      type: string
      description: >
        Direction of a transfer:

          * `CRYPTO_DEPOSIT` - A crypto deposit operation
          * `CRYPTO_WITHDRAWAL` - A crypto withdrawal operation
          * `FIAT_DEPOSIT` - A fiat deposit operation, if supported
          * `FIAT_WITHDRAWAL` - A fiat withdrawal operation, if supported
      enum:
        - CRYPTO_DEPOSIT
        - CRYPTO_WITHDRAWAL
        - FIAT_DEPOSIT
        - FIAT_WITHDRAWAL
      example:
        CRYPTO_DEPOSIT
    ETransferDirectionTypeWithdraw:
      type: string
      description: >
        Direction of a transfer:

          * `CRYPTO_DEPOSIT` - A crypto deposit operation
          * `CRYPTO_WITHDRAWAL` - A crypto withdrawal operation
          * `FIAT_DEPOSIT` - A fiat deposit operation, if supported
          * `FIAT_WITHDRAWAL` - A fiat withdrawal operation, if supported
      enum:
        - CRYPTO_DEPOSIT
        - CRYPTO_WITHDRAWAL
        - FIAT_DEPOSIT
        - FIAT_WITHDRAWAL
      example:
        CRYPTO_WITHDRAWAL
    AccountBalance:
      type: object
      properties:
        coinSymbol:
          type: string
          example: USDT
          description: "The symbol of the cryptocurrency"
        totalAmount:
          type: string
          example: "195.172612"
          description: "The total amount (as a string, for precision) in the account"
        pendingAmount:
          type: string
          example: "188.2315812"
          description: "The pending amount in usage, on mempool but not passed confirmations"
        availableAmount:
          type: string
          example: "10.333"
          description: "The available amount for usage, the amount the account has with guarantee"
        borrowedAmount:
          type: string
          example: "3.1"
          description: "The borrowed amount for usage, the amount the exchange borrowed to the user"
    Balance:
      type: object
      properties:
        displayName:
          type: string
          example: "Margin (Cross)"
          description: "Text to discribe the account type"
        type:
          $ref : '#/components/schemas/EAccountType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/AccountBalance'
    Status:
      type: string
      description: >
        Types of possible statuses for transactions:

          * `NOT_FOUND` - The transaction doesn't exist. If returned in `GET /deposit` or `GET /withdraw`, all other params are optional.
          * `PROCESSING` - The exchange is processing the transaction.
          * `CANCELLED` - The transaction was terminated by the account owner or the exchange.
          * `FAILED` - The transaction failed due to some error in the transaction.
          * `PENDING_MANUAL_APPROVAL` - The transaction requires some manual approval by the account owner.
          * `PENDING_SERVICE_MANUAL_APPROVAL` - The transaction is being reviewed manually by the exchange and hasn't been accepted yet.
          * `REJECTED` - The exchange rejected the transaction.
          * `COMPLETED` - The transaction is successfully on the blockchain (and passed enough confirmations).
      enum:
        - NOT_FOUND
        - PROCESSING
        - CANCELLED
        - FAILED
        - PENDING_MANUAL_APPROVAL
        - PENDING_SERVICE_MANUAL_APPROVAL
        - REJECTED
        - COMPLETED
      example: "COMPLETED"
